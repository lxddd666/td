// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// CanBoostChatResultOk represents TL type `canBoostChatResultOk#1da13a8b`.
type CanBoostChatResultOk struct {
	// Identifier of the currently boosted chat from which boost will be removed; 0 if none
	CurrentlyBoostedChatID int64
}

// CanBoostChatResultOkTypeID is TL type id of CanBoostChatResultOk.
const CanBoostChatResultOkTypeID = 0x1da13a8b

// construct implements constructor of CanBoostChatResultClass.
func (c CanBoostChatResultOk) construct() CanBoostChatResultClass { return &c }

// Ensuring interfaces in compile-time for CanBoostChatResultOk.
var (
	_ bin.Encoder     = &CanBoostChatResultOk{}
	_ bin.Decoder     = &CanBoostChatResultOk{}
	_ bin.BareEncoder = &CanBoostChatResultOk{}
	_ bin.BareDecoder = &CanBoostChatResultOk{}

	_ CanBoostChatResultClass = &CanBoostChatResultOk{}
)

func (c *CanBoostChatResultOk) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.CurrentlyBoostedChatID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *CanBoostChatResultOk) String() string {
	if c == nil {
		return "CanBoostChatResultOk(nil)"
	}
	type Alias CanBoostChatResultOk
	return fmt.Sprintf("CanBoostChatResultOk%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CanBoostChatResultOk) TypeID() uint32 {
	return CanBoostChatResultOkTypeID
}

// TypeName returns name of type in TL schema.
func (*CanBoostChatResultOk) TypeName() string {
	return "canBoostChatResultOk"
}

// TypeInfo returns info about TL type.
func (c *CanBoostChatResultOk) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "canBoostChatResultOk",
		ID:   CanBoostChatResultOkTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "CurrentlyBoostedChatID",
			SchemaName: "currently_boosted_chat_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *CanBoostChatResultOk) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultOk#1da13a8b as nil")
	}
	b.PutID(CanBoostChatResultOkTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CanBoostChatResultOk) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultOk#1da13a8b as nil")
	}
	b.PutInt53(c.CurrentlyBoostedChatID)
	return nil
}

// Decode implements bin.Decoder.
func (c *CanBoostChatResultOk) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultOk#1da13a8b to nil")
	}
	if err := b.ConsumeID(CanBoostChatResultOkTypeID); err != nil {
		return fmt.Errorf("unable to decode canBoostChatResultOk#1da13a8b: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CanBoostChatResultOk) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultOk#1da13a8b to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode canBoostChatResultOk#1da13a8b: field currently_boosted_chat_id: %w", err)
		}
		c.CurrentlyBoostedChatID = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *CanBoostChatResultOk) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultOk#1da13a8b as nil")
	}
	b.ObjStart()
	b.PutID("canBoostChatResultOk")
	b.Comma()
	b.FieldStart("currently_boosted_chat_id")
	b.PutInt53(c.CurrentlyBoostedChatID)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *CanBoostChatResultOk) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultOk#1da13a8b to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("canBoostChatResultOk"); err != nil {
				return fmt.Errorf("unable to decode canBoostChatResultOk#1da13a8b: %w", err)
			}
		case "currently_boosted_chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode canBoostChatResultOk#1da13a8b: field currently_boosted_chat_id: %w", err)
			}
			c.CurrentlyBoostedChatID = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetCurrentlyBoostedChatID returns value of CurrentlyBoostedChatID field.
func (c *CanBoostChatResultOk) GetCurrentlyBoostedChatID() (value int64) {
	if c == nil {
		return
	}
	return c.CurrentlyBoostedChatID
}

// CanBoostChatResultInvalidChat represents TL type `canBoostChatResultInvalidChat#3d4c3668`.
type CanBoostChatResultInvalidChat struct {
}

// CanBoostChatResultInvalidChatTypeID is TL type id of CanBoostChatResultInvalidChat.
const CanBoostChatResultInvalidChatTypeID = 0x3d4c3668

// construct implements constructor of CanBoostChatResultClass.
func (c CanBoostChatResultInvalidChat) construct() CanBoostChatResultClass { return &c }

// Ensuring interfaces in compile-time for CanBoostChatResultInvalidChat.
var (
	_ bin.Encoder     = &CanBoostChatResultInvalidChat{}
	_ bin.Decoder     = &CanBoostChatResultInvalidChat{}
	_ bin.BareEncoder = &CanBoostChatResultInvalidChat{}
	_ bin.BareDecoder = &CanBoostChatResultInvalidChat{}

	_ CanBoostChatResultClass = &CanBoostChatResultInvalidChat{}
)

func (c *CanBoostChatResultInvalidChat) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *CanBoostChatResultInvalidChat) String() string {
	if c == nil {
		return "CanBoostChatResultInvalidChat(nil)"
	}
	type Alias CanBoostChatResultInvalidChat
	return fmt.Sprintf("CanBoostChatResultInvalidChat%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CanBoostChatResultInvalidChat) TypeID() uint32 {
	return CanBoostChatResultInvalidChatTypeID
}

// TypeName returns name of type in TL schema.
func (*CanBoostChatResultInvalidChat) TypeName() string {
	return "canBoostChatResultInvalidChat"
}

// TypeInfo returns info about TL type.
func (c *CanBoostChatResultInvalidChat) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "canBoostChatResultInvalidChat",
		ID:   CanBoostChatResultInvalidChatTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *CanBoostChatResultInvalidChat) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultInvalidChat#3d4c3668 as nil")
	}
	b.PutID(CanBoostChatResultInvalidChatTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CanBoostChatResultInvalidChat) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultInvalidChat#3d4c3668 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *CanBoostChatResultInvalidChat) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultInvalidChat#3d4c3668 to nil")
	}
	if err := b.ConsumeID(CanBoostChatResultInvalidChatTypeID); err != nil {
		return fmt.Errorf("unable to decode canBoostChatResultInvalidChat#3d4c3668: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CanBoostChatResultInvalidChat) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultInvalidChat#3d4c3668 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *CanBoostChatResultInvalidChat) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultInvalidChat#3d4c3668 as nil")
	}
	b.ObjStart()
	b.PutID("canBoostChatResultInvalidChat")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *CanBoostChatResultInvalidChat) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultInvalidChat#3d4c3668 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("canBoostChatResultInvalidChat"); err != nil {
				return fmt.Errorf("unable to decode canBoostChatResultInvalidChat#3d4c3668: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// CanBoostChatResultAlreadyBoosted represents TL type `canBoostChatResultAlreadyBoosted#3e012a69`.
type CanBoostChatResultAlreadyBoosted struct {
}

// CanBoostChatResultAlreadyBoostedTypeID is TL type id of CanBoostChatResultAlreadyBoosted.
const CanBoostChatResultAlreadyBoostedTypeID = 0x3e012a69

// construct implements constructor of CanBoostChatResultClass.
func (c CanBoostChatResultAlreadyBoosted) construct() CanBoostChatResultClass { return &c }

// Ensuring interfaces in compile-time for CanBoostChatResultAlreadyBoosted.
var (
	_ bin.Encoder     = &CanBoostChatResultAlreadyBoosted{}
	_ bin.Decoder     = &CanBoostChatResultAlreadyBoosted{}
	_ bin.BareEncoder = &CanBoostChatResultAlreadyBoosted{}
	_ bin.BareDecoder = &CanBoostChatResultAlreadyBoosted{}

	_ CanBoostChatResultClass = &CanBoostChatResultAlreadyBoosted{}
)

func (c *CanBoostChatResultAlreadyBoosted) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *CanBoostChatResultAlreadyBoosted) String() string {
	if c == nil {
		return "CanBoostChatResultAlreadyBoosted(nil)"
	}
	type Alias CanBoostChatResultAlreadyBoosted
	return fmt.Sprintf("CanBoostChatResultAlreadyBoosted%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CanBoostChatResultAlreadyBoosted) TypeID() uint32 {
	return CanBoostChatResultAlreadyBoostedTypeID
}

// TypeName returns name of type in TL schema.
func (*CanBoostChatResultAlreadyBoosted) TypeName() string {
	return "canBoostChatResultAlreadyBoosted"
}

// TypeInfo returns info about TL type.
func (c *CanBoostChatResultAlreadyBoosted) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "canBoostChatResultAlreadyBoosted",
		ID:   CanBoostChatResultAlreadyBoostedTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *CanBoostChatResultAlreadyBoosted) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultAlreadyBoosted#3e012a69 as nil")
	}
	b.PutID(CanBoostChatResultAlreadyBoostedTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CanBoostChatResultAlreadyBoosted) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultAlreadyBoosted#3e012a69 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *CanBoostChatResultAlreadyBoosted) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultAlreadyBoosted#3e012a69 to nil")
	}
	if err := b.ConsumeID(CanBoostChatResultAlreadyBoostedTypeID); err != nil {
		return fmt.Errorf("unable to decode canBoostChatResultAlreadyBoosted#3e012a69: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CanBoostChatResultAlreadyBoosted) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultAlreadyBoosted#3e012a69 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *CanBoostChatResultAlreadyBoosted) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultAlreadyBoosted#3e012a69 as nil")
	}
	b.ObjStart()
	b.PutID("canBoostChatResultAlreadyBoosted")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *CanBoostChatResultAlreadyBoosted) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultAlreadyBoosted#3e012a69 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("canBoostChatResultAlreadyBoosted"); err != nil {
				return fmt.Errorf("unable to decode canBoostChatResultAlreadyBoosted#3e012a69: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// CanBoostChatResultPremiumNeeded represents TL type `canBoostChatResultPremiumNeeded#d4b4e4f`.
type CanBoostChatResultPremiumNeeded struct {
}

// CanBoostChatResultPremiumNeededTypeID is TL type id of CanBoostChatResultPremiumNeeded.
const CanBoostChatResultPremiumNeededTypeID = 0xd4b4e4f

// construct implements constructor of CanBoostChatResultClass.
func (c CanBoostChatResultPremiumNeeded) construct() CanBoostChatResultClass { return &c }

// Ensuring interfaces in compile-time for CanBoostChatResultPremiumNeeded.
var (
	_ bin.Encoder     = &CanBoostChatResultPremiumNeeded{}
	_ bin.Decoder     = &CanBoostChatResultPremiumNeeded{}
	_ bin.BareEncoder = &CanBoostChatResultPremiumNeeded{}
	_ bin.BareDecoder = &CanBoostChatResultPremiumNeeded{}

	_ CanBoostChatResultClass = &CanBoostChatResultPremiumNeeded{}
)

func (c *CanBoostChatResultPremiumNeeded) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *CanBoostChatResultPremiumNeeded) String() string {
	if c == nil {
		return "CanBoostChatResultPremiumNeeded(nil)"
	}
	type Alias CanBoostChatResultPremiumNeeded
	return fmt.Sprintf("CanBoostChatResultPremiumNeeded%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CanBoostChatResultPremiumNeeded) TypeID() uint32 {
	return CanBoostChatResultPremiumNeededTypeID
}

// TypeName returns name of type in TL schema.
func (*CanBoostChatResultPremiumNeeded) TypeName() string {
	return "canBoostChatResultPremiumNeeded"
}

// TypeInfo returns info about TL type.
func (c *CanBoostChatResultPremiumNeeded) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "canBoostChatResultPremiumNeeded",
		ID:   CanBoostChatResultPremiumNeededTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *CanBoostChatResultPremiumNeeded) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultPremiumNeeded#d4b4e4f as nil")
	}
	b.PutID(CanBoostChatResultPremiumNeededTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CanBoostChatResultPremiumNeeded) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultPremiumNeeded#d4b4e4f as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *CanBoostChatResultPremiumNeeded) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultPremiumNeeded#d4b4e4f to nil")
	}
	if err := b.ConsumeID(CanBoostChatResultPremiumNeededTypeID); err != nil {
		return fmt.Errorf("unable to decode canBoostChatResultPremiumNeeded#d4b4e4f: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CanBoostChatResultPremiumNeeded) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultPremiumNeeded#d4b4e4f to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *CanBoostChatResultPremiumNeeded) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultPremiumNeeded#d4b4e4f as nil")
	}
	b.ObjStart()
	b.PutID("canBoostChatResultPremiumNeeded")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *CanBoostChatResultPremiumNeeded) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultPremiumNeeded#d4b4e4f to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("canBoostChatResultPremiumNeeded"); err != nil {
				return fmt.Errorf("unable to decode canBoostChatResultPremiumNeeded#d4b4e4f: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// CanBoostChatResultPremiumSubscriptionNeeded represents TL type `canBoostChatResultPremiumSubscriptionNeeded#7550d3cc`.
type CanBoostChatResultPremiumSubscriptionNeeded struct {
}

// CanBoostChatResultPremiumSubscriptionNeededTypeID is TL type id of CanBoostChatResultPremiumSubscriptionNeeded.
const CanBoostChatResultPremiumSubscriptionNeededTypeID = 0x7550d3cc

// construct implements constructor of CanBoostChatResultClass.
func (c CanBoostChatResultPremiumSubscriptionNeeded) construct() CanBoostChatResultClass { return &c }

// Ensuring interfaces in compile-time for CanBoostChatResultPremiumSubscriptionNeeded.
var (
	_ bin.Encoder     = &CanBoostChatResultPremiumSubscriptionNeeded{}
	_ bin.Decoder     = &CanBoostChatResultPremiumSubscriptionNeeded{}
	_ bin.BareEncoder = &CanBoostChatResultPremiumSubscriptionNeeded{}
	_ bin.BareDecoder = &CanBoostChatResultPremiumSubscriptionNeeded{}

	_ CanBoostChatResultClass = &CanBoostChatResultPremiumSubscriptionNeeded{}
)

func (c *CanBoostChatResultPremiumSubscriptionNeeded) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *CanBoostChatResultPremiumSubscriptionNeeded) String() string {
	if c == nil {
		return "CanBoostChatResultPremiumSubscriptionNeeded(nil)"
	}
	type Alias CanBoostChatResultPremiumSubscriptionNeeded
	return fmt.Sprintf("CanBoostChatResultPremiumSubscriptionNeeded%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CanBoostChatResultPremiumSubscriptionNeeded) TypeID() uint32 {
	return CanBoostChatResultPremiumSubscriptionNeededTypeID
}

// TypeName returns name of type in TL schema.
func (*CanBoostChatResultPremiumSubscriptionNeeded) TypeName() string {
	return "canBoostChatResultPremiumSubscriptionNeeded"
}

// TypeInfo returns info about TL type.
func (c *CanBoostChatResultPremiumSubscriptionNeeded) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "canBoostChatResultPremiumSubscriptionNeeded",
		ID:   CanBoostChatResultPremiumSubscriptionNeededTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *CanBoostChatResultPremiumSubscriptionNeeded) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultPremiumSubscriptionNeeded#7550d3cc as nil")
	}
	b.PutID(CanBoostChatResultPremiumSubscriptionNeededTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CanBoostChatResultPremiumSubscriptionNeeded) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultPremiumSubscriptionNeeded#7550d3cc as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *CanBoostChatResultPremiumSubscriptionNeeded) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultPremiumSubscriptionNeeded#7550d3cc to nil")
	}
	if err := b.ConsumeID(CanBoostChatResultPremiumSubscriptionNeededTypeID); err != nil {
		return fmt.Errorf("unable to decode canBoostChatResultPremiumSubscriptionNeeded#7550d3cc: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CanBoostChatResultPremiumSubscriptionNeeded) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultPremiumSubscriptionNeeded#7550d3cc to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *CanBoostChatResultPremiumSubscriptionNeeded) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultPremiumSubscriptionNeeded#7550d3cc as nil")
	}
	b.ObjStart()
	b.PutID("canBoostChatResultPremiumSubscriptionNeeded")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *CanBoostChatResultPremiumSubscriptionNeeded) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultPremiumSubscriptionNeeded#7550d3cc to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("canBoostChatResultPremiumSubscriptionNeeded"); err != nil {
				return fmt.Errorf("unable to decode canBoostChatResultPremiumSubscriptionNeeded#7550d3cc: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// CanBoostChatResultWaitNeeded represents TL type `canBoostChatResultWaitNeeded#343aaeaa`.
type CanBoostChatResultWaitNeeded struct {
	// Time left before the user can boost another chat
	RetryAfter int32
}

// CanBoostChatResultWaitNeededTypeID is TL type id of CanBoostChatResultWaitNeeded.
const CanBoostChatResultWaitNeededTypeID = 0x343aaeaa

// construct implements constructor of CanBoostChatResultClass.
func (c CanBoostChatResultWaitNeeded) construct() CanBoostChatResultClass { return &c }

// Ensuring interfaces in compile-time for CanBoostChatResultWaitNeeded.
var (
	_ bin.Encoder     = &CanBoostChatResultWaitNeeded{}
	_ bin.Decoder     = &CanBoostChatResultWaitNeeded{}
	_ bin.BareEncoder = &CanBoostChatResultWaitNeeded{}
	_ bin.BareDecoder = &CanBoostChatResultWaitNeeded{}

	_ CanBoostChatResultClass = &CanBoostChatResultWaitNeeded{}
)

func (c *CanBoostChatResultWaitNeeded) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.RetryAfter == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *CanBoostChatResultWaitNeeded) String() string {
	if c == nil {
		return "CanBoostChatResultWaitNeeded(nil)"
	}
	type Alias CanBoostChatResultWaitNeeded
	return fmt.Sprintf("CanBoostChatResultWaitNeeded%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CanBoostChatResultWaitNeeded) TypeID() uint32 {
	return CanBoostChatResultWaitNeededTypeID
}

// TypeName returns name of type in TL schema.
func (*CanBoostChatResultWaitNeeded) TypeName() string {
	return "canBoostChatResultWaitNeeded"
}

// TypeInfo returns info about TL type.
func (c *CanBoostChatResultWaitNeeded) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "canBoostChatResultWaitNeeded",
		ID:   CanBoostChatResultWaitNeededTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "RetryAfter",
			SchemaName: "retry_after",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *CanBoostChatResultWaitNeeded) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultWaitNeeded#343aaeaa as nil")
	}
	b.PutID(CanBoostChatResultWaitNeededTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CanBoostChatResultWaitNeeded) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultWaitNeeded#343aaeaa as nil")
	}
	b.PutInt32(c.RetryAfter)
	return nil
}

// Decode implements bin.Decoder.
func (c *CanBoostChatResultWaitNeeded) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultWaitNeeded#343aaeaa to nil")
	}
	if err := b.ConsumeID(CanBoostChatResultWaitNeededTypeID); err != nil {
		return fmt.Errorf("unable to decode canBoostChatResultWaitNeeded#343aaeaa: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CanBoostChatResultWaitNeeded) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultWaitNeeded#343aaeaa to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode canBoostChatResultWaitNeeded#343aaeaa: field retry_after: %w", err)
		}
		c.RetryAfter = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *CanBoostChatResultWaitNeeded) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode canBoostChatResultWaitNeeded#343aaeaa as nil")
	}
	b.ObjStart()
	b.PutID("canBoostChatResultWaitNeeded")
	b.Comma()
	b.FieldStart("retry_after")
	b.PutInt32(c.RetryAfter)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *CanBoostChatResultWaitNeeded) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode canBoostChatResultWaitNeeded#343aaeaa to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("canBoostChatResultWaitNeeded"); err != nil {
				return fmt.Errorf("unable to decode canBoostChatResultWaitNeeded#343aaeaa: %w", err)
			}
		case "retry_after":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode canBoostChatResultWaitNeeded#343aaeaa: field retry_after: %w", err)
			}
			c.RetryAfter = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetRetryAfter returns value of RetryAfter field.
func (c *CanBoostChatResultWaitNeeded) GetRetryAfter() (value int32) {
	if c == nil {
		return
	}
	return c.RetryAfter
}

// CanBoostChatResultClassName is schema name of CanBoostChatResultClass.
const CanBoostChatResultClassName = "CanBoostChatResult"

// CanBoostChatResultClass represents CanBoostChatResult generic type.
//
// Example:
//
//	g, err := tdapi.DecodeCanBoostChatResult(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.CanBoostChatResultOk: // canBoostChatResultOk#1da13a8b
//	case *tdapi.CanBoostChatResultInvalidChat: // canBoostChatResultInvalidChat#3d4c3668
//	case *tdapi.CanBoostChatResultAlreadyBoosted: // canBoostChatResultAlreadyBoosted#3e012a69
//	case *tdapi.CanBoostChatResultPremiumNeeded: // canBoostChatResultPremiumNeeded#d4b4e4f
//	case *tdapi.CanBoostChatResultPremiumSubscriptionNeeded: // canBoostChatResultPremiumSubscriptionNeeded#7550d3cc
//	case *tdapi.CanBoostChatResultWaitNeeded: // canBoostChatResultWaitNeeded#343aaeaa
//	default: panic(v)
//	}
type CanBoostChatResultClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() CanBoostChatResultClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeCanBoostChatResult implements binary de-serialization for CanBoostChatResultClass.
func DecodeCanBoostChatResult(buf *bin.Buffer) (CanBoostChatResultClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case CanBoostChatResultOkTypeID:
		// Decoding canBoostChatResultOk#1da13a8b.
		v := CanBoostChatResultOk{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	case CanBoostChatResultInvalidChatTypeID:
		// Decoding canBoostChatResultInvalidChat#3d4c3668.
		v := CanBoostChatResultInvalidChat{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	case CanBoostChatResultAlreadyBoostedTypeID:
		// Decoding canBoostChatResultAlreadyBoosted#3e012a69.
		v := CanBoostChatResultAlreadyBoosted{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	case CanBoostChatResultPremiumNeededTypeID:
		// Decoding canBoostChatResultPremiumNeeded#d4b4e4f.
		v := CanBoostChatResultPremiumNeeded{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	case CanBoostChatResultPremiumSubscriptionNeededTypeID:
		// Decoding canBoostChatResultPremiumSubscriptionNeeded#7550d3cc.
		v := CanBoostChatResultPremiumSubscriptionNeeded{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	case CanBoostChatResultWaitNeededTypeID:
		// Decoding canBoostChatResultWaitNeeded#343aaeaa.
		v := CanBoostChatResultWaitNeeded{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONCanBoostChatResult implements binary de-serialization for CanBoostChatResultClass.
func DecodeTDLibJSONCanBoostChatResult(buf tdjson.Decoder) (CanBoostChatResultClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "canBoostChatResultOk":
		// Decoding canBoostChatResultOk#1da13a8b.
		v := CanBoostChatResultOk{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	case "canBoostChatResultInvalidChat":
		// Decoding canBoostChatResultInvalidChat#3d4c3668.
		v := CanBoostChatResultInvalidChat{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	case "canBoostChatResultAlreadyBoosted":
		// Decoding canBoostChatResultAlreadyBoosted#3e012a69.
		v := CanBoostChatResultAlreadyBoosted{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	case "canBoostChatResultPremiumNeeded":
		// Decoding canBoostChatResultPremiumNeeded#d4b4e4f.
		v := CanBoostChatResultPremiumNeeded{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	case "canBoostChatResultPremiumSubscriptionNeeded":
		// Decoding canBoostChatResultPremiumSubscriptionNeeded#7550d3cc.
		v := CanBoostChatResultPremiumSubscriptionNeeded{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	case "canBoostChatResultWaitNeeded":
		// Decoding canBoostChatResultWaitNeeded#343aaeaa.
		v := CanBoostChatResultWaitNeeded{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode CanBoostChatResultClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// CanBoostChatResult boxes the CanBoostChatResultClass providing a helper.
type CanBoostChatResultBox struct {
	CanBoostChatResult CanBoostChatResultClass
}

// Decode implements bin.Decoder for CanBoostChatResultBox.
func (b *CanBoostChatResultBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode CanBoostChatResultBox to nil")
	}
	v, err := DecodeCanBoostChatResult(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.CanBoostChatResult = v
	return nil
}

// Encode implements bin.Encode for CanBoostChatResultBox.
func (b *CanBoostChatResultBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.CanBoostChatResult == nil {
		return fmt.Errorf("unable to encode CanBoostChatResultClass as nil")
	}
	return b.CanBoostChatResult.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for CanBoostChatResultBox.
func (b *CanBoostChatResultBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode CanBoostChatResultBox to nil")
	}
	v, err := DecodeTDLibJSONCanBoostChatResult(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.CanBoostChatResult = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for CanBoostChatResultBox.
func (b *CanBoostChatResultBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.CanBoostChatResult == nil {
		return fmt.Errorf("unable to encode CanBoostChatResultClass as nil")
	}
	return b.CanBoostChatResult.EncodeTDLibJSON(buf)
}
