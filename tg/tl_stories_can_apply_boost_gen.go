// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoriesCanApplyBoostRequest represents TL type `stories.canApplyBoost#db05c1bd`.
//
// See https://core.telegram.org/method/stories.canApplyBoost for reference.
type StoriesCanApplyBoostRequest struct {
	// Peer field of StoriesCanApplyBoostRequest.
	Peer InputPeerClass
}

// StoriesCanApplyBoostRequestTypeID is TL type id of StoriesCanApplyBoostRequest.
const StoriesCanApplyBoostRequestTypeID = 0xdb05c1bd

// Ensuring interfaces in compile-time for StoriesCanApplyBoostRequest.
var (
	_ bin.Encoder     = &StoriesCanApplyBoostRequest{}
	_ bin.Decoder     = &StoriesCanApplyBoostRequest{}
	_ bin.BareEncoder = &StoriesCanApplyBoostRequest{}
	_ bin.BareDecoder = &StoriesCanApplyBoostRequest{}
)

func (c *StoriesCanApplyBoostRequest) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Peer == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *StoriesCanApplyBoostRequest) String() string {
	if c == nil {
		return "StoriesCanApplyBoostRequest(nil)"
	}
	type Alias StoriesCanApplyBoostRequest
	return fmt.Sprintf("StoriesCanApplyBoostRequest%+v", Alias(*c))
}

// FillFrom fills StoriesCanApplyBoostRequest from given interface.
func (c *StoriesCanApplyBoostRequest) FillFrom(from interface {
	GetPeer() (value InputPeerClass)
}) {
	c.Peer = from.GetPeer()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoriesCanApplyBoostRequest) TypeID() uint32 {
	return StoriesCanApplyBoostRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*StoriesCanApplyBoostRequest) TypeName() string {
	return "stories.canApplyBoost"
}

// TypeInfo returns info about TL type.
func (c *StoriesCanApplyBoostRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stories.canApplyBoost",
		ID:   StoriesCanApplyBoostRequestTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *StoriesCanApplyBoostRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode stories.canApplyBoost#db05c1bd as nil")
	}
	b.PutID(StoriesCanApplyBoostRequestTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *StoriesCanApplyBoostRequest) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode stories.canApplyBoost#db05c1bd as nil")
	}
	if c.Peer == nil {
		return fmt.Errorf("unable to encode stories.canApplyBoost#db05c1bd: field peer is nil")
	}
	if err := c.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode stories.canApplyBoost#db05c1bd: field peer: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *StoriesCanApplyBoostRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode stories.canApplyBoost#db05c1bd to nil")
	}
	if err := b.ConsumeID(StoriesCanApplyBoostRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode stories.canApplyBoost#db05c1bd: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *StoriesCanApplyBoostRequest) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode stories.canApplyBoost#db05c1bd to nil")
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode stories.canApplyBoost#db05c1bd: field peer: %w", err)
		}
		c.Peer = value
	}
	return nil
}

// GetPeer returns value of Peer field.
func (c *StoriesCanApplyBoostRequest) GetPeer() (value InputPeerClass) {
	if c == nil {
		return
	}
	return c.Peer
}

// StoriesCanApplyBoost invokes method stories.canApplyBoost#db05c1bd returning error if any.
//
// See https://core.telegram.org/method/stories.canApplyBoost for reference.
func (c *Client) StoriesCanApplyBoost(ctx context.Context, peer InputPeerClass) (StoriesCanApplyBoostResultClass, error) {
	var result StoriesCanApplyBoostResultBox

	request := &StoriesCanApplyBoostRequest{
		Peer: peer,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.CanApplyBoostResult, nil
}
