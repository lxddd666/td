// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoriesBoostsStatus represents TL type `stories.boostsStatus#66ea1fef`.
//
// See https://core.telegram.org/constructor/stories.boostsStatus for reference.
type StoriesBoostsStatus struct {
	// Flags field of StoriesBoostsStatus.
	Flags bin.Fields
	// MyBoost field of StoriesBoostsStatus.
	MyBoost bool
	// Level field of StoriesBoostsStatus.
	Level int
	// CurrentLevelBoosts field of StoriesBoostsStatus.
	CurrentLevelBoosts int
	// Boosts field of StoriesBoostsStatus.
	Boosts int
	// NextLevelBoosts field of StoriesBoostsStatus.
	//
	// Use SetNextLevelBoosts and GetNextLevelBoosts helpers.
	NextLevelBoosts int
	// PremiumAudience field of StoriesBoostsStatus.
	//
	// Use SetPremiumAudience and GetPremiumAudience helpers.
	PremiumAudience StatsPercentValue
}

// StoriesBoostsStatusTypeID is TL type id of StoriesBoostsStatus.
const StoriesBoostsStatusTypeID = 0x66ea1fef

// Ensuring interfaces in compile-time for StoriesBoostsStatus.
var (
	_ bin.Encoder     = &StoriesBoostsStatus{}
	_ bin.Decoder     = &StoriesBoostsStatus{}
	_ bin.BareEncoder = &StoriesBoostsStatus{}
	_ bin.BareDecoder = &StoriesBoostsStatus{}
)

func (b *StoriesBoostsStatus) Zero() bool {
	if b == nil {
		return true
	}
	if !(b.Flags.Zero()) {
		return false
	}
	if !(b.MyBoost == false) {
		return false
	}
	if !(b.Level == 0) {
		return false
	}
	if !(b.CurrentLevelBoosts == 0) {
		return false
	}
	if !(b.Boosts == 0) {
		return false
	}
	if !(b.NextLevelBoosts == 0) {
		return false
	}
	if !(b.PremiumAudience.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (b *StoriesBoostsStatus) String() string {
	if b == nil {
		return "StoriesBoostsStatus(nil)"
	}
	type Alias StoriesBoostsStatus
	return fmt.Sprintf("StoriesBoostsStatus%+v", Alias(*b))
}

// FillFrom fills StoriesBoostsStatus from given interface.
func (b *StoriesBoostsStatus) FillFrom(from interface {
	GetMyBoost() (value bool)
	GetLevel() (value int)
	GetCurrentLevelBoosts() (value int)
	GetBoosts() (value int)
	GetNextLevelBoosts() (value int, ok bool)
	GetPremiumAudience() (value StatsPercentValue, ok bool)
}) {
	b.MyBoost = from.GetMyBoost()
	b.Level = from.GetLevel()
	b.CurrentLevelBoosts = from.GetCurrentLevelBoosts()
	b.Boosts = from.GetBoosts()
	if val, ok := from.GetNextLevelBoosts(); ok {
		b.NextLevelBoosts = val
	}

	if val, ok := from.GetPremiumAudience(); ok {
		b.PremiumAudience = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoriesBoostsStatus) TypeID() uint32 {
	return StoriesBoostsStatusTypeID
}

// TypeName returns name of type in TL schema.
func (*StoriesBoostsStatus) TypeName() string {
	return "stories.boostsStatus"
}

// TypeInfo returns info about TL type.
func (b *StoriesBoostsStatus) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stories.boostsStatus",
		ID:   StoriesBoostsStatusTypeID,
	}
	if b == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "MyBoost",
			SchemaName: "my_boost",
			Null:       !b.Flags.Has(2),
		},
		{
			Name:       "Level",
			SchemaName: "level",
		},
		{
			Name:       "CurrentLevelBoosts",
			SchemaName: "current_level_boosts",
		},
		{
			Name:       "Boosts",
			SchemaName: "boosts",
		},
		{
			Name:       "NextLevelBoosts",
			SchemaName: "next_level_boosts",
			Null:       !b.Flags.Has(0),
		},
		{
			Name:       "PremiumAudience",
			SchemaName: "premium_audience",
			Null:       !b.Flags.Has(1),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (b *StoriesBoostsStatus) SetFlags() {
	if !(b.MyBoost == false) {
		b.Flags.Set(2)
	}
	if !(b.NextLevelBoosts == 0) {
		b.Flags.Set(0)
	}
	if !(b.PremiumAudience.Zero()) {
		b.Flags.Set(1)
	}
}

// Encode implements bin.Encoder.
func (b *StoriesBoostsStatus) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode stories.boostsStatus#66ea1fef as nil")
	}
	buf.PutID(StoriesBoostsStatusTypeID)
	return b.EncodeBare(buf)
}

// EncodeBare implements bin.BareEncoder.
func (b *StoriesBoostsStatus) EncodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode stories.boostsStatus#66ea1fef as nil")
	}
	b.SetFlags()
	if err := b.Flags.Encode(buf); err != nil {
		return fmt.Errorf("unable to encode stories.boostsStatus#66ea1fef: field flags: %w", err)
	}
	buf.PutInt(b.Level)
	buf.PutInt(b.CurrentLevelBoosts)
	buf.PutInt(b.Boosts)
	if b.Flags.Has(0) {
		buf.PutInt(b.NextLevelBoosts)
	}
	if b.Flags.Has(1) {
		if err := b.PremiumAudience.Encode(buf); err != nil {
			return fmt.Errorf("unable to encode stories.boostsStatus#66ea1fef: field premium_audience: %w", err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (b *StoriesBoostsStatus) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode stories.boostsStatus#66ea1fef to nil")
	}
	if err := buf.ConsumeID(StoriesBoostsStatusTypeID); err != nil {
		return fmt.Errorf("unable to decode stories.boostsStatus#66ea1fef: %w", err)
	}
	return b.DecodeBare(buf)
}

// DecodeBare implements bin.BareDecoder.
func (b *StoriesBoostsStatus) DecodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode stories.boostsStatus#66ea1fef to nil")
	}
	{
		if err := b.Flags.Decode(buf); err != nil {
			return fmt.Errorf("unable to decode stories.boostsStatus#66ea1fef: field flags: %w", err)
		}
	}
	b.MyBoost = b.Flags.Has(2)
	{
		value, err := buf.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.boostsStatus#66ea1fef: field level: %w", err)
		}
		b.Level = value
	}
	{
		value, err := buf.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.boostsStatus#66ea1fef: field current_level_boosts: %w", err)
		}
		b.CurrentLevelBoosts = value
	}
	{
		value, err := buf.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.boostsStatus#66ea1fef: field boosts: %w", err)
		}
		b.Boosts = value
	}
	if b.Flags.Has(0) {
		value, err := buf.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.boostsStatus#66ea1fef: field next_level_boosts: %w", err)
		}
		b.NextLevelBoosts = value
	}
	if b.Flags.Has(1) {
		if err := b.PremiumAudience.Decode(buf); err != nil {
			return fmt.Errorf("unable to decode stories.boostsStatus#66ea1fef: field premium_audience: %w", err)
		}
	}
	return nil
}

// SetMyBoost sets value of MyBoost conditional field.
func (b *StoriesBoostsStatus) SetMyBoost(value bool) {
	if value {
		b.Flags.Set(2)
		b.MyBoost = true
	} else {
		b.Flags.Unset(2)
		b.MyBoost = false
	}
}

// GetMyBoost returns value of MyBoost conditional field.
func (b *StoriesBoostsStatus) GetMyBoost() (value bool) {
	if b == nil {
		return
	}
	return b.Flags.Has(2)
}

// GetLevel returns value of Level field.
func (b *StoriesBoostsStatus) GetLevel() (value int) {
	if b == nil {
		return
	}
	return b.Level
}

// GetCurrentLevelBoosts returns value of CurrentLevelBoosts field.
func (b *StoriesBoostsStatus) GetCurrentLevelBoosts() (value int) {
	if b == nil {
		return
	}
	return b.CurrentLevelBoosts
}

// GetBoosts returns value of Boosts field.
func (b *StoriesBoostsStatus) GetBoosts() (value int) {
	if b == nil {
		return
	}
	return b.Boosts
}

// SetNextLevelBoosts sets value of NextLevelBoosts conditional field.
func (b *StoriesBoostsStatus) SetNextLevelBoosts(value int) {
	b.Flags.Set(0)
	b.NextLevelBoosts = value
}

// GetNextLevelBoosts returns value of NextLevelBoosts conditional field and
// boolean which is true if field was set.
func (b *StoriesBoostsStatus) GetNextLevelBoosts() (value int, ok bool) {
	if b == nil {
		return
	}
	if !b.Flags.Has(0) {
		return value, false
	}
	return b.NextLevelBoosts, true
}

// SetPremiumAudience sets value of PremiumAudience conditional field.
func (b *StoriesBoostsStatus) SetPremiumAudience(value StatsPercentValue) {
	b.Flags.Set(1)
	b.PremiumAudience = value
}

// GetPremiumAudience returns value of PremiumAudience conditional field and
// boolean which is true if field was set.
func (b *StoriesBoostsStatus) GetPremiumAudience() (value StatsPercentValue, ok bool) {
	if b == nil {
		return
	}
	if !b.Flags.Has(1) {
		return value, false
	}
	return b.PremiumAudience, true
}
