// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoriesBoostersList represents TL type `stories.boostersList#f3dd3d1d`.
//
// See https://core.telegram.org/constructor/stories.boostersList for reference.
type StoriesBoostersList struct {
	// Flags field of StoriesBoostersList.
	Flags bin.Fields
	// Count field of StoriesBoostersList.
	Count int
	// Boosters field of StoriesBoostersList.
	Boosters []Booster
	// NextOffset field of StoriesBoostersList.
	//
	// Use SetNextOffset and GetNextOffset helpers.
	NextOffset string
	// Users field of StoriesBoostersList.
	Users []UserClass
}

// StoriesBoostersListTypeID is TL type id of StoriesBoostersList.
const StoriesBoostersListTypeID = 0xf3dd3d1d

// Ensuring interfaces in compile-time for StoriesBoostersList.
var (
	_ bin.Encoder     = &StoriesBoostersList{}
	_ bin.Decoder     = &StoriesBoostersList{}
	_ bin.BareEncoder = &StoriesBoostersList{}
	_ bin.BareDecoder = &StoriesBoostersList{}
)

func (b *StoriesBoostersList) Zero() bool {
	if b == nil {
		return true
	}
	if !(b.Flags.Zero()) {
		return false
	}
	if !(b.Count == 0) {
		return false
	}
	if !(b.Boosters == nil) {
		return false
	}
	if !(b.NextOffset == "") {
		return false
	}
	if !(b.Users == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (b *StoriesBoostersList) String() string {
	if b == nil {
		return "StoriesBoostersList(nil)"
	}
	type Alias StoriesBoostersList
	return fmt.Sprintf("StoriesBoostersList%+v", Alias(*b))
}

// FillFrom fills StoriesBoostersList from given interface.
func (b *StoriesBoostersList) FillFrom(from interface {
	GetCount() (value int)
	GetBoosters() (value []Booster)
	GetNextOffset() (value string, ok bool)
	GetUsers() (value []UserClass)
}) {
	b.Count = from.GetCount()
	b.Boosters = from.GetBoosters()
	if val, ok := from.GetNextOffset(); ok {
		b.NextOffset = val
	}

	b.Users = from.GetUsers()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoriesBoostersList) TypeID() uint32 {
	return StoriesBoostersListTypeID
}

// TypeName returns name of type in TL schema.
func (*StoriesBoostersList) TypeName() string {
	return "stories.boostersList"
}

// TypeInfo returns info about TL type.
func (b *StoriesBoostersList) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stories.boostersList",
		ID:   StoriesBoostersListTypeID,
	}
	if b == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Count",
			SchemaName: "count",
		},
		{
			Name:       "Boosters",
			SchemaName: "boosters",
		},
		{
			Name:       "NextOffset",
			SchemaName: "next_offset",
			Null:       !b.Flags.Has(0),
		},
		{
			Name:       "Users",
			SchemaName: "users",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (b *StoriesBoostersList) SetFlags() {
	if !(b.NextOffset == "") {
		b.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (b *StoriesBoostersList) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode stories.boostersList#f3dd3d1d as nil")
	}
	buf.PutID(StoriesBoostersListTypeID)
	return b.EncodeBare(buf)
}

// EncodeBare implements bin.BareEncoder.
func (b *StoriesBoostersList) EncodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode stories.boostersList#f3dd3d1d as nil")
	}
	b.SetFlags()
	if err := b.Flags.Encode(buf); err != nil {
		return fmt.Errorf("unable to encode stories.boostersList#f3dd3d1d: field flags: %w", err)
	}
	buf.PutInt(b.Count)
	buf.PutVectorHeader(len(b.Boosters))
	for idx, v := range b.Boosters {
		if err := v.Encode(buf); err != nil {
			return fmt.Errorf("unable to encode stories.boostersList#f3dd3d1d: field boosters element with index %d: %w", idx, err)
		}
	}
	if b.Flags.Has(0) {
		buf.PutString(b.NextOffset)
	}
	buf.PutVectorHeader(len(b.Users))
	for idx, v := range b.Users {
		if v == nil {
			return fmt.Errorf("unable to encode stories.boostersList#f3dd3d1d: field users element with index %d is nil", idx)
		}
		if err := v.Encode(buf); err != nil {
			return fmt.Errorf("unable to encode stories.boostersList#f3dd3d1d: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (b *StoriesBoostersList) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode stories.boostersList#f3dd3d1d to nil")
	}
	if err := buf.ConsumeID(StoriesBoostersListTypeID); err != nil {
		return fmt.Errorf("unable to decode stories.boostersList#f3dd3d1d: %w", err)
	}
	return b.DecodeBare(buf)
}

// DecodeBare implements bin.BareDecoder.
func (b *StoriesBoostersList) DecodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode stories.boostersList#f3dd3d1d to nil")
	}
	{
		if err := b.Flags.Decode(buf); err != nil {
			return fmt.Errorf("unable to decode stories.boostersList#f3dd3d1d: field flags: %w", err)
		}
	}
	{
		value, err := buf.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.boostersList#f3dd3d1d: field count: %w", err)
		}
		b.Count = value
	}
	{
		headerLen, err := buf.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode stories.boostersList#f3dd3d1d: field boosters: %w", err)
		}

		if headerLen > 0 {
			b.Boosters = make([]Booster, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value Booster
			if err := value.Decode(buf); err != nil {
				return fmt.Errorf("unable to decode stories.boostersList#f3dd3d1d: field boosters: %w", err)
			}
			b.Boosters = append(b.Boosters, value)
		}
	}
	if b.Flags.Has(0) {
		value, err := buf.String()
		if err != nil {
			return fmt.Errorf("unable to decode stories.boostersList#f3dd3d1d: field next_offset: %w", err)
		}
		b.NextOffset = value
	}
	{
		headerLen, err := buf.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode stories.boostersList#f3dd3d1d: field users: %w", err)
		}

		if headerLen > 0 {
			b.Users = make([]UserClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(buf)
			if err != nil {
				return fmt.Errorf("unable to decode stories.boostersList#f3dd3d1d: field users: %w", err)
			}
			b.Users = append(b.Users, value)
		}
	}
	return nil
}

// GetCount returns value of Count field.
func (b *StoriesBoostersList) GetCount() (value int) {
	if b == nil {
		return
	}
	return b.Count
}

// GetBoosters returns value of Boosters field.
func (b *StoriesBoostersList) GetBoosters() (value []Booster) {
	if b == nil {
		return
	}
	return b.Boosters
}

// SetNextOffset sets value of NextOffset conditional field.
func (b *StoriesBoostersList) SetNextOffset(value string) {
	b.Flags.Set(0)
	b.NextOffset = value
}

// GetNextOffset returns value of NextOffset conditional field and
// boolean which is true if field was set.
func (b *StoriesBoostersList) GetNextOffset() (value string, ok bool) {
	if b == nil {
		return
	}
	if !b.Flags.Has(0) {
		return value, false
	}
	return b.NextOffset, true
}

// GetUsers returns value of Users field.
func (b *StoriesBoostersList) GetUsers() (value []UserClass) {
	if b == nil {
		return
	}
	return b.Users
}

// MapUsers returns field Users wrapped in UserClassArray helper.
func (b *StoriesBoostersList) MapUsers() (value UserClassArray) {
	return UserClassArray(b.Users)
}
