// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ToggleStoryIsPinnedRequest represents TL type `toggleStoryIsPinned#b493b30e`.
type ToggleStoryIsPinnedRequest struct {
	// Identifier of the chat that posted the story
	StorySenderChatID int64
	// Identifier of the story
	StoryID int32
	// Pass true to make the story accessible after expiration; pass false to make it private
	IsPinned bool
}

// ToggleStoryIsPinnedRequestTypeID is TL type id of ToggleStoryIsPinnedRequest.
const ToggleStoryIsPinnedRequestTypeID = 0xb493b30e

// Ensuring interfaces in compile-time for ToggleStoryIsPinnedRequest.
var (
	_ bin.Encoder     = &ToggleStoryIsPinnedRequest{}
	_ bin.Decoder     = &ToggleStoryIsPinnedRequest{}
	_ bin.BareEncoder = &ToggleStoryIsPinnedRequest{}
	_ bin.BareDecoder = &ToggleStoryIsPinnedRequest{}
)

func (t *ToggleStoryIsPinnedRequest) Zero() bool {
	if t == nil {
		return true
	}
	if !(t.StorySenderChatID == 0) {
		return false
	}
	if !(t.StoryID == 0) {
		return false
	}
	if !(t.IsPinned == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (t *ToggleStoryIsPinnedRequest) String() string {
	if t == nil {
		return "ToggleStoryIsPinnedRequest(nil)"
	}
	type Alias ToggleStoryIsPinnedRequest
	return fmt.Sprintf("ToggleStoryIsPinnedRequest%+v", Alias(*t))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ToggleStoryIsPinnedRequest) TypeID() uint32 {
	return ToggleStoryIsPinnedRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ToggleStoryIsPinnedRequest) TypeName() string {
	return "toggleStoryIsPinned"
}

// TypeInfo returns info about TL type.
func (t *ToggleStoryIsPinnedRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "toggleStoryIsPinned",
		ID:   ToggleStoryIsPinnedRequestTypeID,
	}
	if t == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "StorySenderChatID",
			SchemaName: "story_sender_chat_id",
		},
		{
			Name:       "StoryID",
			SchemaName: "story_id",
		},
		{
			Name:       "IsPinned",
			SchemaName: "is_pinned",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (t *ToggleStoryIsPinnedRequest) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode toggleStoryIsPinned#b493b30e as nil")
	}
	b.PutID(ToggleStoryIsPinnedRequestTypeID)
	return t.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (t *ToggleStoryIsPinnedRequest) EncodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode toggleStoryIsPinned#b493b30e as nil")
	}
	b.PutInt53(t.StorySenderChatID)
	b.PutInt32(t.StoryID)
	b.PutBool(t.IsPinned)
	return nil
}

// Decode implements bin.Decoder.
func (t *ToggleStoryIsPinnedRequest) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode toggleStoryIsPinned#b493b30e to nil")
	}
	if err := b.ConsumeID(ToggleStoryIsPinnedRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode toggleStoryIsPinned#b493b30e: %w", err)
	}
	return t.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (t *ToggleStoryIsPinnedRequest) DecodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode toggleStoryIsPinned#b493b30e to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode toggleStoryIsPinned#b493b30e: field story_sender_chat_id: %w", err)
		}
		t.StorySenderChatID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode toggleStoryIsPinned#b493b30e: field story_id: %w", err)
		}
		t.StoryID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode toggleStoryIsPinned#b493b30e: field is_pinned: %w", err)
		}
		t.IsPinned = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (t *ToggleStoryIsPinnedRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if t == nil {
		return fmt.Errorf("can't encode toggleStoryIsPinned#b493b30e as nil")
	}
	b.ObjStart()
	b.PutID("toggleStoryIsPinned")
	b.Comma()
	b.FieldStart("story_sender_chat_id")
	b.PutInt53(t.StorySenderChatID)
	b.Comma()
	b.FieldStart("story_id")
	b.PutInt32(t.StoryID)
	b.Comma()
	b.FieldStart("is_pinned")
	b.PutBool(t.IsPinned)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (t *ToggleStoryIsPinnedRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if t == nil {
		return fmt.Errorf("can't decode toggleStoryIsPinned#b493b30e to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("toggleStoryIsPinned"); err != nil {
				return fmt.Errorf("unable to decode toggleStoryIsPinned#b493b30e: %w", err)
			}
		case "story_sender_chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode toggleStoryIsPinned#b493b30e: field story_sender_chat_id: %w", err)
			}
			t.StorySenderChatID = value
		case "story_id":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode toggleStoryIsPinned#b493b30e: field story_id: %w", err)
			}
			t.StoryID = value
		case "is_pinned":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode toggleStoryIsPinned#b493b30e: field is_pinned: %w", err)
			}
			t.IsPinned = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetStorySenderChatID returns value of StorySenderChatID field.
func (t *ToggleStoryIsPinnedRequest) GetStorySenderChatID() (value int64) {
	if t == nil {
		return
	}
	return t.StorySenderChatID
}

// GetStoryID returns value of StoryID field.
func (t *ToggleStoryIsPinnedRequest) GetStoryID() (value int32) {
	if t == nil {
		return
	}
	return t.StoryID
}

// GetIsPinned returns value of IsPinned field.
func (t *ToggleStoryIsPinnedRequest) GetIsPinned() (value bool) {
	if t == nil {
		return
	}
	return t.IsPinned
}

// ToggleStoryIsPinned invokes method toggleStoryIsPinned#b493b30e returning error if any.
func (c *Client) ToggleStoryIsPinned(ctx context.Context, request *ToggleStoryIsPinnedRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
